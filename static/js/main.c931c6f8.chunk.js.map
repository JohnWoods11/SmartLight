{"version":3,"sources":["index.js"],"names":["IntensitySlide","props","handleChange","bind","item","this","emitChanged","console","log","type","name","min","max","onChange","React","Component","ColourSelect","value","colour","className","Light","emitClicked","size","intensity","is_on","style","backgroundColor","height","width","onClick","handleClick","Room","state","colours","i","slotClicked","slotChanged","sliderSlotChanged","setState","target","renderLight","renderColourSelect","renderIntensitySlide","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c931c6f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass IntensitySlide extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(item) {\n    if (this.props.emitChanged) {\n      this.props.emitChanged(item);\n    }\n    else {\n      console.log(`emitChanged is null ${this.props.emitChanged}`);\n    }\n  }\n\n  render() {\n    return (\n      <input type = \"range\"\n             name = \"% luminosity\"\n             min = \"0\" \n             max = \"100\"\n             onChange = {this.handleChange}/>\n    )\n  }\n}\n\nclass ColourSelect extends React.Component {\n  constructor(props) {\n    super(props);\n  \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(item) {\n    if (this.props.emitChanged) {\n      this.props.emitChanged(item);\n    }\n    else {\n      console.log(`emitChanged is null ${this.props.emitChanged}`);\n    }\n  }\n\n  render () {\n    let select = <input type = \"color\"\n                  value = {this.props.colour}   \n                  className = \"colourselect\"\n                  onChange = {this.handleChange}\n            />\n    return select;\n            \n  }\n}\n\nclass Light extends React.Component {\n\n  handleClick() {\n    if (this.props.emitClicked) {\n      this.props.emitClicked();\n    }\n    else {\n      console.log(`emitClicked is null ${this.props.emitClicked}`);\n    }\n  }\n\n  render() {\n    const size = this.props.intensity / 100 * 40;\n    const is_on = this.props.is_on;\n    let colour = this.props.colour;\n    if (!is_on) {\n      colour = \"white\";\n    }\n    let button = <button className = \"light\"\n    style = {{backgroundColor:colour, height:size, width:size}}\n    onClick = {()=>{this.handleClick();}}/>      \n\n    return (\n      button  \n    );\n  }\n}\n\nclass Room extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {colours: [\"#f6b73c\", \"#f6b73c\", \"#f6b73c\",\n                            \"#f6b73c\", \"#f6b73c\", \"#f6b73c\"],\n                  is_on: [ true, false, false,\n                           false, false, false],\n                  intensity: [100, 100, 100, \n                              100, 100, 100],\n                 };\n  }\n\n  renderLight(i) {\n    return <Light colour = {this.state.colours[i]}\n                  is_on = {this.state.is_on[i]}\n                  intensity = {this.state.intensity[i]}\n                  emitClicked = {()=>{this.slotClicked(i)}}\n            />\n  }\n\n  renderColourSelect(i) {\n    return <span> \n              <ColourSelect colour = {this.state.colours[i]}\n                            emitChanged = {(item)=>{this.slotChanged(item, i)}}\n               />\n              <a> {`Light ${i + 1}`} </a>     \n           </span>\n  }\n\n  renderIntensitySlide(i) {\n    return <IntensitySlide intensity = {this.state.intensity[i]}\n                           emitChanged = {(item)=>{this.sliderSlotChanged(item, i)}}\n            />\n  }\n\n  slotClicked(i) {\n    let is_on = [...this.state.is_on];\n    is_on[i] = !is_on[i]; \n    this.setState({is_on:is_on});\n  }\n\n  slotChanged(item, i) {\n    let colours = [...this.state.colours];\n    colours[i] = item.target.value;\n    this.setState({colours:colours});\n  }\n\n  sliderSlotChanged(item, i) {\n    let intensity = [...this.state.intensity];\n    intensity[i] = item.target.value;\n    this.setState({intensity:intensity});\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.renderLight(0)}\n          {this.renderColourSelect(0)}\n          {this.renderIntensitySlide(0)}\n        </div>\n        <div>\n          {this.renderLight(1)}\n          {this.renderColourSelect(1)}\n          {this.renderIntensitySlide(1)}\n        </div>\n        <div>\n          {this.renderLight(2)}\n          {this.renderColourSelect(2)}\n          {this.renderIntensitySlide(2)}\n        </div>\n        <div>\n          {this.renderLight(3)}\n          {this.renderColourSelect(3)}\n          {this.renderIntensitySlide(3)}\n        </div>\n        <div>\n          {this.renderLight(4)}\n          {this.renderColourSelect(4)}\n          {this.renderIntensitySlide(4)}\n        </div>\n        <div>\n          {this.renderLight(5)}\n          {this.renderColourSelect(5)}\n          {this.renderIntensitySlide(5)}\n        </div>\n      </div>\n    );\n  }\n}\n\n\n// ========================================\n\nReactDOM.render(\n  <Room/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}